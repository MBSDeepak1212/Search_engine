Two of your friends (let's denote them by PPP and QQQ) are playing a game and you are acting as their dealer. The rules of the game are as follows:There are NNN bracket sequences, denoted by S1,S2,\xe2\x80\xa6,SNS1,S2,\xe2\x80\xa6,SNS_1, S_2, \\ldots, S_N.Initially, both players do not have any sequences. They play up to NNN turns. For each valid iii, in the iii-th turn, you have to choose one player and give the bracket sequence SiSiS_i to this player.After each turn, if it is possible to arrange all the sequences of one player in some order and concatenate them in such a way that the resulting bracket sequence is non-empty and balanced, that player immediately wins and the game ends. Note that it is impossible for both players to form non-empty balanced sequences at the same time.You like PPP more and hence want PPP to win. Find the smallest number of turns you need in order to make PPP win or determine that it is impossible to achieve this.Notes:A bracket sequence is an arbitrary string containing only characters '(' and ')'.A balanced bracket sequence is one of the following:An empty string.A concatenation of two non-empty balanced bracket sequences.A string formed by adding '(' to the beginning and ')' to the end of a balanced bracket sequence.